module:
  - name: katas
    doc: |
      Check katas

    icon: "ü•ã"
imports:
  - !Module {name: kore, hidden: True}
  - !Module {name: blocks, hidden: True}
  - !Module {name: pets, hidden: True}
  - !Module {name: inspectors, hidden: True}

classes:

  - !Class
    name: Kata
    doc: Exercise to practice skills
    icon: "ü•ã"
    bases: [kore.Object]
    attributes:
    - !Attribute
      name: number
      type: int
    - !Attribute
      name: title
      type: str
    - !Attribute
      name: instructions
      type: str
      is_long: True
    - !Attribute
      name: example
      type: str
      is_long: True
      language: gherkin
    - !Attribute
      name: hints
      type: str
      is_long: True
    - !Attribute
      name: solution
      type: str
      is_long: True
      language: gherkin
    - !Attribute
      name: learning_outcomes
      type: str
      is_long: True
    methods:
      - !Method
        name: __str__
        code: |
          return f"{self.icon} Kata {self.number}: {self.title}"

instances:
  
  - !Scene
    icon: "ü•ã"
    as_name: scene
    title: Katas
    lines:
    - 12
    - 1
    - 2
    - 1
    - 2
    - 2
    - 2

  - !Kata &kata1
    number: 1
    title: Fix the smells
    instructions: |
      ‚Ä¢ Review the original scenario and identify the quality issues  
      ‚Ä¢ Apply best practices in user story writing and Gherkin syntax  
      ‚Ä¢ Improve clarity, completeness, and business alignment
    example: |
      Feature: Beverages list
        I need to see drinks

        Scenario: Show drinks
          Knowing that the system has some drinks
          When I look for them
          And I am thirsty
          Then I can see them
    hints: |
      ‚Ä¢ Is the title clear and user-focused?  
      ‚Ä¢ Is the user role explicit?  
      ‚Ä¢ Are the steps using proper Gherkin keywords?  
      ‚Ä¢ Are the inputs and expected outputs concrete?  
      ‚Ä¢ Is ‚Äúthirsty‚Äù a state or an event?
    solution: |
      The following issues were identified:

      | Issue                            | Fix                                                                 |
      |----------------------------------|----------------------------------------------------------------------|
      | Feature title is vague           | Use a clearer and user-focused title: "View Available Beverages"   |
      | User role is missing             | Use "As a [user], I want [goal] so that [benefit]" format          |
      | Scenario lacks details           | Use specific data (e.g., names & prices of beverages)              |
      | Step definitions are unclear     | Use precise Gherkin wording (Given-When-Then instead of "Knowing") |
      | No acceptance criteria           | Specify clear expected outcomes                                     |
      | No business motivation           | Explain why the feature is valuable                                 |
      | "When" is not atomic             | Split it into one action per step                                   |
      | "Thirsty" is a state, not action | Move it to motivation / outside the GWT block                      |

      Refactored scenario:

      Feature: View Available Beverages
        As a customer  
        I want to see a list of available drinks  
        So that I can choose one and place an order

        Scenario: Viewing available beverages
          Given the system has the following beverages available:
            | name       | price |
            | Green Tea  | 2.50  |
            | Coffee     | 3.00  |
            | Matcha     | 4.00  |
          When I open the beverage menu
          Then I should see the available beverages with their prices
    learning_outcomes: |
      ‚Ä¢ Improve poorly written scenarios through concrete refactoring  
      ‚Ä¢ Use clear and user-focused titles  
      ‚Ä¢ Express user roles and goals using the user story format  
      ‚Ä¢ Write testable, specific Gherkin steps  
      ‚Ä¢ Distinguish actions from states  
      ‚Ä¢ Clarify acceptance criteria and business motivation  


  - !Kata &kata2
    number: 2
    title: Fill the gaps
    instructions: |
      ‚Ä¢ Fill in the blanks using realistic user behavior  
      ‚Ä¢ Focus on user intent and expected system response  
      ‚Ä¢ Use clear, testable language for each step  
      ‚Ä¢ Complete the scenario title based on the action and outcome
    example: |
      Scenario: _______
        Given the system is available
        When _______
        Then the order should be _______
    hints: |
      ‚Ä¢ Refer to earlier katas: ordering, payment, cancellation  
      ‚Ä¢ Ask yourself: What action is the user taking?  
      ‚Ä¢ What system result makes that action meaningful?
    solution: |
      Scenario: Confirming an order after payment
        Given the system is available
        When the user completes payment
        Then the order should be confirmed
    learning_outcomes: |
      ‚Ä¢ Practice writing minimal, meaningful Gherkin scenarios  
      ‚Ä¢ Make user intent and system behavior explicit  
      ‚Ä¢ Choose precise verbs for **When** and **Then** steps  
      ‚Ä¢ Use titles to clarify scenario purpose  
      ‚Ä¢ Reinforce the Given‚ÄìWhen‚ÄìThen structure as a thinking tool  
      ‚Ä¢ Develop habits of testable, readable language  
  
  - !Kata &kata3
    number: 3
    title: Split in two smaller stories
    instructions: |
      ‚Ä¢ Identify where the scenario mixes responsibilities  
      ‚Ä¢ Break it into two clear, focused flows  
      ‚Ä¢ Respect the Single Responsibility Principle
    example: |
      Scenario: Ordering and paying for a drink
        Given the system is available
        When the user selects "Green Tea"
        Then the selection should be added to the order
        When the user completes payment
        Then the order should be confirmed
    hints: |
      ‚Ä¢ Look for two distinct actions or outcomes  
      ‚Ä¢ Start by naming two scenarios based on verbs: "select", "pay"
    solution: |
      Scenario: Selecting a beverage
        Given the system is available
        When the user selects "Green Tea"
        Then the selection should be added to the order
  
      Scenario: Paying for the selected beverage
        Given the order contains "Green Tea"
        When the user completes payment
        Then the order should be confirmed
    learning_outcomes: |
      ‚Ä¢ Practice scenario splitting for clarity  
      ‚Ä¢ Understand and apply the Single Responsibility Principle  
      ‚Ä¢ Improve readability and maintainability  
      ‚Ä¢ Design focused tests for each business action  

  - !Kata &kata4
    number: 4
    title: Generalize with scenario outline
    instructions: |
      ‚Ä¢ Replace specific examples with placeholders  
      ‚Ä¢ Use a table to explore variations without duplicating logic
    example: |
      Scenario: Selecting a drink
        Given the system is available
        When the user selects "Green Tea"
        Then the selection should be added to the order
    hints: |
      ‚Ä¢ Think of other drinks the user might choose  
      ‚Ä¢ What changes in the steps? What stays the same?
    solution: |
      Scenario Outline: Selecting a beverage
        Given the system is available
        When the user selects "<beverage>"
        Then the selection should be added to the order
  
      Examples:
        | beverage   |
        | Green Tea  |
        | Coffee     |
        | Matcha     |
    learning_outcomes: |
      ‚Ä¢ Practice generalizing scenarios for multiple inputs  
      ‚Ä¢ Learn to use Gherkin Scenario Outlines effectively  
      ‚Ä¢ Reduce duplication while improving test coverage  

  - !Kata &kata5
    number: 5
    title: Write a new story (missing step)
    instructions: |
      ‚Ä¢ Based on the journey, what‚Äôs a feature that‚Äôs missing?  
      ‚Ä¢ Turn it into a clear user story and scenario
    example: |
      Feature: ______
        As a _____
        I want _____  
        So that _____
      
      Scenario: _____
        Given _____
        When _____
        Then _____

    hints: |
      ‚Ä¢ Think about post-payment or documentation needs  
      ‚Ä¢ Use ‚ÄúThen‚Äù to express visible confirmation
    solution: |

      Feature: Receipt Generation
        As a customer  
        I want to receive a receipt  
        So that I can please my accountant

      Scenario: Receiving a receipt after payment
        Given the order has been confirmed
        When the user requests a receipt
        Then a receipt should be generated
        And it should include the beverage name, price, and payment status
    learning_outcomes: |
      ‚Ä¢ Identify gaps in the user journey  
      ‚Ä¢ Express new requirements using BDD style  
      ‚Ä¢ Understand how to support secondary user needs  

  - !Kata &kata6
    number: 6
    title: Write a new story (innovation)
    instructions: |
      ‚Ä¢ Think like a product designer: what would delight or anticipate user needs?  
      ‚Ä¢ Add a feature that‚Äôs not strictly required, but improves flow
    example: |
      
      Scenario: _____
        Given _____
        When _____
        Then _____
    hints: |
      ‚Ä¢ Use past behavior or preference  
      ‚Ä¢ Think: personalization, automation, prediction
    solution: |
      Scenario: Suggesting a preferred drink to returning customers
        Given the customer has previously ordered "Matcha"
        And they return to the system
        When the beverage menu is displayed
        Then "Matcha" should be highlighted as their usual choice
    learning_outcomes: |
      ‚Ä¢ Practice designing forward-thinking user stories  
      ‚Ä¢ Consider customer delight and speed  
      ‚Ä¢ Learn to frame anticipatory behavior in Gherkin  

  - !Kata &kata7
    number: 7
    title: Merge happy and unhappy flows
    instructions: |
      ‚Ä¢ Take two flows (one successful, one not)  
      ‚Ä¢ Use a scenario outline with a <success> column  
      ‚Ä¢ Keep structure identical but vary expectations
    example: |

      Scenario: ‚úÖ Happy path ‚Äî Receipt is issued after successful payment
        Given the order contains "Green Tea"
        And the payment is successful
        When the user requests a receipt
        Then a receipt should be generated
        And it should include the beverage name, price, and payment status

      Scenario: ‚ùåUnhappy Path ‚Äî Receipt is not issued if payment failed
        Given the order contains "Matcha"
        And the payment has failed
        When the user requests a receipt
        Then no receipt should be generated

    hints: |
      ‚Ä¢ Think about what changes when success = False  
      ‚Ä¢ What result no longer happens?
    solution: |
      Scenario Outline: Completing a drink order
        Given the order contains "<beverage>"
        And the payment was <success>
        When the user requests a receipt
        Then a receipt should be generated: <success>
  
      Examples:
        | beverage   | success |
        | Green Tea  | True    |
        | Matcha     | False   |

    learning_outcomes: |
      ‚Ä¢ Use Scenario Outline to eliminate repetition  
      ‚Ä¢ Merge happy and unhappy flows cleanly  
      ‚Ä¢ Express outcomes declaratively via the examples table  
      ‚Ä¢ Separate logic from data for clarity  
      ‚Ä¢ Test both success and failure with the same structure  
      ‚Ä¢ Improve communication by making variation visible, not buried  
      ‚Ä¢ Merging is a refactoring that can come later: start with the happy flow, implement and test it, then add the alternative flow, then merge  

  - !Kata &kata8
    number: 8
    title: Write an Ab-User Scenario
    instructions: |
      ‚Ä¢ Think like an abuser, hacker, or system misuser  
      ‚Ä¢ Write a story from their point of view  
      ‚Ä¢ Defend the system with a GWT scenario
    example: |

      Scenario: _____
        Given _____
        When _____
        Then _____

    hints: |
      ‚Ä¢ Try to break business rules or sneak through workflows  
      ‚Ä¢ What does the system need to prevent?
    solution: |
      Scenario: Prevent cancellation after order is served
        Given the order for "Matcha" has already been served
        When the user attempts to cancel the order
        Then the cancellation should be rejected
        And no refund should be issued
    learning_outcomes: |
      ‚Ä¢ Practice writing malicious or confused-user scenarios  
      ‚Ä¢ Improve system resilience through behavioral tests  
      ‚Ä¢ Design for prevention and control logic  

  - !Kata &kata9
    number: 9
    title: Write a LeadTime constraint as a scenario
    instructions: |
      ‚Ä¢ Express a constraint on how fast a user should receive value  
      ‚Ä¢ Make time-to-value visible and measurable in Gherkin
    example: |

      Scenario: _____
        Given _____
        When _____
        Then _____

    hints: |
      ‚Ä¢ Think of the full user-visible flow: order ‚Üí served  
      ‚Ä¢ Use a clear threshold the team can measure
    solution: |
      Scenario: Receiving my drink quickly after ordering
        Given I place an order for "Green Tea"
        When the drink is served
        Then the total time should be less than 5 minutes
    learning_outcomes: |
      ‚Ä¢ Connect user flow with time-to-value  
      ‚Ä¢ Make non-functional expectations testable  
      ‚Ä¢ Align team on what ‚Äúfast enough‚Äù looks like  

  - !Kata &kata10
    number: 10
    title: Write a Resource constraint
    instructions: |
      ‚Ä¢ Define a system behavior under resource pressure  
      ‚Ä¢ Use thresholds for CPU, memory, or disk  
      ‚Ä¢ Tie it to a meaningful outcome for the user
    example: |
      
      Scenario: _____
        Given _____
        When _____
        Then _____


    hints: |
      ‚Ä¢ Consider burst traffic or system scale  
      ‚Ä¢ Use realistic thresholds for observability
    solution: |
      Scenario: Avoiding server overload during order processing
        Given the system is running and accepting drink orders
        When 50 users place orders simultaneously
        Then the CPU usage should remain below 80%
        And the system should continue to respond within 1 second

    learning_outcomes: |
      ‚Ä¢ Translate infrastructure limits into behavioral scenarios  
      ‚Ä¢ Write testable constraints on performance under load  
      ‚Ä¢ Protect UX and delivery under pressure  

  - !Kata &kata11
    number: 11
    title: Add commands, views and flows to the workflow
    instructions: |
      ‚Ä¢ Map the user flow from start to finish  
      ‚Ä¢ Add the command (action), the view (what‚Äôs seen), and the event/state change
    example: | 
      | Step | Command  | View  | Event/State Change  |
      |------|----------|-------|---------------------|
      | 1    | ...      |       |                     |
      | 2    | ...      |       |                     |

    hints: |
      ‚Ä¢ Walk through the full experience  
      ‚Ä¢ Ask: what did the user do, see, and trigger?
    solution: |
      | Step | Command                          | View                         | Event/State Change        |
      |------|----------------------------------|------------------------------|---------------------------|
      | 1    | Request beverage menu            | Drink list is displayed      | BeverageListDisplayed     |
      | 2    | Select a beverage                | Drink preview                | BeverageSelected          |
      | 3    | Place the order                  | Order summary                | OrderPlaced               |
      | 4    | Complete payment                 | Payment confirmed            | PaymentConfirmed          |
      | 5    | Start drink preparation          | Status: "Preparing..."       | OrderConfirmed ‚Üí InProgress |
      | 6    | Mark as served                   | "Your drink is ready!" popup | OrderServed               |
      | 7    | Request receipt (optional)       | Receipt screen/download      | ReceiptGenerated          |
    learning_outcomes: |
      ‚Ä¢ Model systems using commands, views, and events  
      ‚Ä¢ Visualize the entire experience  
      ‚Ä¢ Build foundations for event-driven or UX-aligned architecture  

  - !Kata &kata12
    number: 12
    title: Identify the MVP happy flow with lead time
    instructions: |
      ‚Ä¢ Define the shortest complete flow that delivers value  
      ‚Ä¢ Add a constraint that defines "fast enough" for the user
    example: |

      Scenario: _____
        Given _____
        When _____
        Then _____


    hints: |
      ‚Ä¢ Keep it simple and focused  
      ‚Ä¢ Express the "minimum valuable" version of the full flow
    solution: |
      Scenario: Ordering and receiving a drink within the expected time
        Given the system is available
        When I order a "Green Tea" and complete payment
        Then the drink should be served
        And the total lead time should be less than 5 minutes
    learning_outcomes: |
      ‚Ä¢ Practice defining a minimum valuable flow  
      ‚Ä¢ Tie user satisfaction to lead time constraints  
      ‚Ä¢ Anchor MVP delivery in behavior and outcome    
    

  - !Kata &a2kata101
    number: 101
    title: Compl√®te le dialogue
    instructions: |
      ‚Ä¢ Lis le court dialogue propos√©  
      ‚Ä¢ Choisis la bonne r√©ponse pour compl√©ter la phrase manquante  
      ‚Ä¢ Utilise ton intuition et les indices du contexte  
      ‚Ä¢ Ne choisis pas au hasard : justifie-toi mentalement
    example: |
      Scenario: Trouver la bonne r√©ponse
        Given le client dit : "Bonjour, je voudrais un caf√© s‚Äôil vous pla√Æt."
        And le serveur r√©pond : "_____"
        Then la r√©ponse correcte est :
          a) Deux caf√©s s‚Äôil vous pla√Æt  
          b) Bien s√ªr, ce sera tout ?  
          c) Non merci, j‚Äôai d√©j√† bu
    hints: |
      ‚Ä¢ Lis les indices dans la phrase du client ("je voudrais")  
      ‚Ä¢ Le serveur doit r√©pondre logiquement dans le contexte  
      ‚Ä¢ "Je voudrais" appelle une r√©ponse de type "Bien s√ªr" ou "Tr√®s bien"
    solution: |
      R√©ponse correcte : b) Bien s√ªr, ce sera tout ?

      Justification :
        - a) n‚Äôa aucun lien logique, c‚Äôest une nouvelle commande  
        - b) est une r√©ponse naturelle et polie d‚Äôun serveur  
        - c) est une phrase personnelle, pas une r√©ponse de serveur
    learning_outcomes: |
      ‚Ä¢ S‚Äôentra√Æner √† rep√©rer les phrases logiques dans un dialogue  
      ‚Ä¢ Choisir des r√©ponses adapt√©es au contexte courant  
      ‚Ä¢ D√©velopper une compr√©hension implicite du fran√ßais parl√©  
      ‚Ä¢ S‚Äôauto-corriger en r√©fl√©chissant √† l‚Äôintention des locuteurs

  - !Table &katas_table
    title: Katas
    source: [*kata1, *kata2, *kata3, *kata4, *kata5, *kata6, *kata7, *kata8, *kata9, *kata10, *kata11, *kata12, *a2kata101]

  - !Form
    subjects: [*katas_table]
    attributes: [instructions]
    border: True
    on_init:
      - !Function
        code: |
          self._hidden = (len(self.subjects[0].source) == 0) or (self.subjects[0].selection is None)
          if not self._hidden:
            self.source = self.subjects[0].selection

  - !Inspector
    title: Problem
    subjects: [*katas_table]
    attributes: [example]
    border: True
    on_init:
      - !Function
        code: |
          self._hidden = (len(self.subjects[0].source) == 0) or (self.subjects[0].selection is None)
          if not self._hidden:
            self.source = self.subjects[0].selection

  - !Text
    title: Pontential solution
    border: False

  - !Inspector
    subjects: [*katas_table]
    attributes: [hints, learning_outcomes]
    border: True
    on_init:
      - !Function
        code: |
          self._hidden = (len(self.subjects[0].source) == 0) or (self.subjects[0].selection is None)
          if not self._hidden:
            self.source = self.subjects[0].selection

  - !Inspector
    subjects: [*katas_table]
    attributes: [solution]
    border: True
    on_init:
      - !Function
        code: |
          self._hidden = (len(self.subjects[0].source) == 0) or (self.subjects[0].selection is None)
          if not self._hidden:
            self.source = self.subjects[0].selection



wwww:
  - &id001 !Beverage
    name: Coffee
    price: 3.5
    icon: ‚òï
  
  - &id003 !Beverage
    name: Green Tea
    price: 2.5
    icon: üçµ
    doc: |
      Green tea is a type of tea that is made from the Camellia sinensis plant. It has a light, refreshing flavor and is known for its health benefits.
  
  - &id009 !Beverage
    name: Lipton Tea
    price: 4.0
    icon: ü´ñ
  
  - &id002 !Order
    doc: |
      Order 001 for a delicious cup of coffee.
    order_id: '001'
    beverage: *id001
  
  - &id004 !Payment
    payment_id: 123
    order: *id002
  
  - !Text
    icon: üéØ
    title: "A Thirsty Journey"
    height: 500
    text: |
      Emma, a disciplined judoka and passionate light-coder, just wrapped up a
      challenging training session. Her muscles ache, and her mind races through the
      techniques she practiced. One thing is clear‚Äîshe needs a refreshing drink. Fast.
      
      She pulls out her phone and opens the **SwiftSip‚Ñ¢** app. Within seconds, she
      finds her favorite Matcha tea on the menu. A simple tap, and her order is placed.
      Another tap, and payment is complete. No confusing menus, no endless confirmations.
      Just smooth, disciplined efficiency‚Äîjust like her judo practice. Before she
      even finishes catching her breath, her tea is ready. She takes a long, satisfying
      sip.  
      
      **SwiftSip‚Ñ¢** did exactly what it promised‚Äîdelivering refreshment without distractions.

  - !Text
    title: Persona
    icon: üë§
    height: 500
    text: |      
      **Background**: Emma is a focused creator who loves simplicity‚Äîin her projects and her life. She builds minimalist low-code apps and practices Judo ü•ã to stay sharp.
      
      **Needs**:  
      - A fast, structured way to order drinks after training.  
      - Simple, clean interfaces without distractions.  
      - Instant feedback when actions are completed.
      
      **Pain Points**:  
      - Dislikes cluttered menus and slow apps.  
      - Hates waiting and repetitive confirmations.  
      - Prefers smooth, focused experiences.
      
  - !Text
    title: Meet Emma
    icon: ü•ã
    media: emma.jpg
    height: 500
    footer: |
      üí° *Design Tip*: For Emma, less is more. Keep it simple, fast, and efficient.


  - !Text
    title: Workflow
    icon: üéè
    media: workflow.jpg

  - !Table &drinks
    title: Drinks
    source: [*id001, *id003, *id009]

  - !Form
    title: Selection
    subjects: [*drinks]
    attributes: [name, price, available, stock, doc]
    border: True
    on_init:
      - !Function
        code: |
          self._hidden = (len(self.subjects[0].source) == 0) or (self.subjects[0].selection is None)
          if not self._hidden:
            self.source = self.subjects[0].selection


  - !Inspector
    title: Coffee
    source: *id001
  
  - !Inspector
    title: Tea
    source: *id003
  
  - !Inspector
    title: Order
    source: *id002
  
  - !Inspector
    title: Payment
    source: *id004

  - !Assistant &assistant
    beverage: *id003

  - !Inspector
    attributes: [beverage]
    source: *assistant


